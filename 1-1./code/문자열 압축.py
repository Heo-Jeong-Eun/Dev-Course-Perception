'''
💡 approaches
1.  N개의 단위로 문자열을 자른다.
2. 자른 문자열로 압축 문자열을 만든다. 
3. 가장 짧은 길이를 반환한다. 

🔑 quiz solution
1.  N개의 단위로 문자열을 자른다.
    - N의 범위 최대는 문자열의 절반값이다. 
    - 따라서 N의 범위는 1부터 전체 길이 절반까지이다. 
    - s의 길이가 1일때를 고려해야하므로 하나를 더해야 한다. for n in range(1, (len(s) // 2) + 2)
    - N개씩 문자열을 자르기 위해서는 N개씩 증가하는 for문을 돌고, i부터 i + n까지 (문자열의 길이 N개) 문자열을 슬라이싱하면 된다. 
2. 자른 문자열로 압축 문자열을 만든다. 
    - 자른 문자열은 하나씩 count가 필요하다. 
    - 슬라이싱한 문자열과 비교해 count하도록 한다. 
    - 현재 단위 문자열을 N개의 크기만큼 슬라이싱하도록 초기화한다.
    - 수행하게 될 for문은 단위 문자열의 다음 문자부터 N개의 크기만큼 반복한다.
    - ex) 2개 단위로 자를 경우 i = 2, 4, 6, 7이고 N개의 크기만큼 건너뛰며 문자열을 확인할 index이다.
    - s[i : i + N]이 다음 문자열부터 자를 단위 문자열만큼 슬라이싱한 값이 된다. 즉 비교할 다음 단위 문자열인 것이다.
    - 현재 단위 문자열과 다음 문자열이 같은지 비교하면 count 할 수 있다.
    - 같다면 갯수를 늘리고, 같지 않다면 처음으로 들어온 단위 문자열이기 때문에 count = 1
    - 다음 비교를 위해 현재 단위 문자열을 다음 문자열로 이동한다.
    - 슬라이싱 한 문자열의 갯수가 1인 경우 count는 생략되고 표현 -> count 없이 문자열만 표현
    - 여러번 들어온 문자열이라면 압축 문자열을 만들어준다. 
3. 가장 짧은 길이를 반환한다. 
    - min()을 사용해 최소 길이를 반환한다. 

🔓 TIL
- 문자열 문제에서 슬라이싱 활용
- 조건이 작은 경우 -> 큰 경우까지 극단인 범위 설정 생각하기
'''

def solution(s):
    answer = 10000

    for n in range(1, (len(s) // 2) + 2):
        result = ''
        cnt = 1
        temp = s[:n] # 단위 문자열 초기화

        for i in range(n, len(s) + n, n):
            if temp == s[i : i + n]:
                cnt += 1
            else:
                if cnt == 1:
                    result += temp
                else:
                    result += str(cnt) + temp
                temp = s[i : i + n]
                cnt = 1

        answer = min(answer, len(result))
        
    return answer